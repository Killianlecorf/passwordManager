@page "/"
@inject HttpClient Http
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveWebAssembly

<PageTitle>Password Manager</PageTitle>

<div class="container">
    <div class="row mb-3">
        <div class="col">
            <h1>My Passwords</h1>
            <div class="d-flex align-items-center">
                <button class="btn btn-primary" @onclick="Logout">
                    <i class="bi bi-box-arrow-right"></i> Logout
                </button>
            </div>
            <div class="mt-3">
                @if (passwords == null)
                {
                    <p>Loading...</p>
                }
                else if (!passwords.Any())
                {
                    <p>No passwords found.</p>
                }
                else
                {
                    <ul>
                        @foreach (var password in passwords)
                        {
                            <li>@password.Name: @password.PasswordValue</li>
                        }
                    </ul>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private bool _isFirstRender = true;
    private List<Password> passwords;
    private int userId;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_isFirstRender)
        {
            _isFirstRender = false;
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
            if (string.IsNullOrEmpty(token))
            {
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                await DecodeToken(token);
                await LoadPasswords();
            }
        }
    }

    private async Task DecodeToken(string token)
    {
        var response = await Http.PostAsJsonAsync("https://localhost:7099/api/users/decode", token);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<DecodeTokenResponse>();
            userId = result.UserId;
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private async Task LoadPasswords()
    {
        passwords = await Http.GetFromJsonAsync<List<Password>>("https://localhost:7099/api/passwords/user/" + userId);
        StateHasChanged();
    }

    private async Task Logout()
    {
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "authToken");
        NavigationManager.NavigateTo("/login");
    }

    public class Password
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string PasswordValue { get; set; }
        public string Url { get; set; }
        public int UserId { get; set; }
        public string Categorie { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime UpdatedAt { get; set; }
    }

    public class DecodeTokenResponse
    {
        public int UserId { get; set; }
    }
}