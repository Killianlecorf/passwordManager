@page "/passwords"
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Manage Passwords</h3>

<input type="text" @bind="searchTerm" placeholder="Search passwords..." />
<button @onclick="SearchPasswords">Search</button>

<h4>Add New Password</h4>
<input type="text" @bind="newPassword.Name" placeholder="Name" />
<input type="text" @bind="newPassword.Category" placeholder="Category" />
<input type="password" @bind="newPassword.PasswordValue" placeholder="Password" />
<button @onclick="AddPassword">Add</button>

<h4>Passwords</h4>
<table>
    <thead>
        <tr>
            <th>Name</th>
            <th>Category</th>
            <th>Password</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var password in passwords)
        {
            <tr>
                <td>@password.Name</td>
                <td>@password.Category</td>
                <td>@password.PasswordValue</td>
                <td>
                    <button @onclick="() => EditPassword(password)">Edit</button>
                    <button @onclick="() => DeletePassword(password.Id)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<PasswordModel> passwords = new();
    private PasswordModel newPassword = new();
    private string searchTerm = "";

    // [Inject] public HttpClient Http { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await LoadPasswords();
    }

    private async Task LoadPasswords()
    {
        passwords = await Http.GetFromJsonAsync<List<PasswordModel>>("api/passwords");
    }

    private async Task AddPassword()
    {
        var response = await Http.PostAsJsonAsync("api/passwords", newPassword);
        if (response.IsSuccessStatusCode)
        {
            newPassword = new PasswordModel();
            await LoadPasswords();
        }
    }

    private async Task EditPassword(PasswordModel password)
    {
        // Implement edit functionality
    }

    private async Task DeletePassword(int id)
    {
        var response = await Http.DeleteAsync($"api/passwords/{id}");
        if (response.IsSuccessStatusCode)
        {
            await LoadPasswords();
        }
    }

    private async Task SearchPasswords()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            await LoadPasswords();
        }
        else
        {
            passwords = await Http.GetFromJsonAsync<List<PasswordModel>>($"api/passwords/search?term={searchTerm}");
        }
    }

    public class PasswordModel
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Category { get; set; }
        public string PasswordValue { get; set; }
        public int UserId { get; set; }
    }
}